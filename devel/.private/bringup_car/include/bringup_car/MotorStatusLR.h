// Generated by gencpp from file bringup_car/MotorStatusLR.msg
// DO NOT EDIT!


#ifndef BRINGUP_CAR_MESSAGE_MOTORSTATUSLR_H
#define BRINGUP_CAR_MESSAGE_MOTORSTATUSLR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <bringup_car/MotorStatus.h>
#include <bringup_car/MotorStatus.h>

namespace bringup_car
{
template <class ContainerAllocator>
struct MotorStatusLR_
{
  typedef MotorStatusLR_<ContainerAllocator> Type;

  MotorStatusLR_()
    : header()
    , left()
    , right()  {
    }
  MotorStatusLR_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , left(_alloc)
    , right(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::bringup_car::MotorStatus_<ContainerAllocator>  _left_type;
  _left_type left;

   typedef  ::bringup_car::MotorStatus_<ContainerAllocator>  _right_type;
  _right_type right;





  typedef boost::shared_ptr< ::bringup_car::MotorStatusLR_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bringup_car::MotorStatusLR_<ContainerAllocator> const> ConstPtr;

}; // struct MotorStatusLR_

typedef ::bringup_car::MotorStatusLR_<std::allocator<void> > MotorStatusLR;

typedef boost::shared_ptr< ::bringup_car::MotorStatusLR > MotorStatusLRPtr;
typedef boost::shared_ptr< ::bringup_car::MotorStatusLR const> MotorStatusLRConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bringup_car::MotorStatusLR_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bringup_car::MotorStatusLR_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bringup_car::MotorStatusLR_<ContainerAllocator1> & lhs, const ::bringup_car::MotorStatusLR_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.left == rhs.left &&
    lhs.right == rhs.right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bringup_car::MotorStatusLR_<ContainerAllocator1> & lhs, const ::bringup_car::MotorStatusLR_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bringup_car

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bringup_car::MotorStatusLR_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bringup_car::MotorStatusLR_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bringup_car::MotorStatusLR_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bringup_car::MotorStatusLR_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bringup_car::MotorStatusLR_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bringup_car::MotorStatusLR_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bringup_car::MotorStatusLR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "924fb1e61934a72c1fa7cdf1620e9fa4";
  }

  static const char* value(const ::bringup_car::MotorStatusLR_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x924fb1e61934a72cULL;
  static const uint64_t static_value2 = 0x1fa7cdf1620e9fa4ULL;
};

template<class ContainerAllocator>
struct DataType< ::bringup_car::MotorStatusLR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bringup_car/MotorStatusLR";
  }

  static const char* value(const ::bringup_car::MotorStatusLR_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bringup_car::MotorStatusLR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"MotorStatus left\n"
"MotorStatus right\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: bringup_car/MotorStatus\n"
"bool low_voltage\n"
"bool overloaded\n"
"int8 power      # PWM duty cycle -100 ... 100\n"
"float32 encoder # degree\n"
"float32 speed   # degree per second\n"
;
  }

  static const char* value(const ::bringup_car::MotorStatusLR_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bringup_car::MotorStatusLR_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.left);
      stream.next(m.right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorStatusLR_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bringup_car::MotorStatusLR_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bringup_car::MotorStatusLR_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "left: ";
    s << std::endl;
    Printer< ::bringup_car::MotorStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.left);
    s << indent << "right: ";
    s << std::endl;
    Printer< ::bringup_car::MotorStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRINGUP_CAR_MESSAGE_MOTORSTATUSLR_H
